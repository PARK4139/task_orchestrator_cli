"""
Selenium을 사용한 YouTube 자동 로그인 및 쿠키 추출 함수
"""

import logging
import time
import traceback
# --- add: netscape cookie dumper ---
from datetime import datetime

from functions import ensure_spoken
from functions.ensure_debug_loged_verbose import ensure_debug_loged_verbose
from functions.ensure_env_var_completed_advanced import ensure_env_var_completed_advanced
from functions.ensure_mouse_clicked_by_coordination_history import ensure_mouse_clicked_by_coordination_history
from functions.ensure_pressed import ensure_pressed
from functions.ensure_slept_by_following_history import ensure_slept_by_following_history
from functions.ensure_target_opened_advanced import ensure_target_opened_advanced
from functions.ensure_typed import ensure_typed
from functions.get_caller_n import get_caller_n
from sources.objects.task_orchestrator_cli_files import F_YOUTUBE_COOKIES_TXT


def _to_epoch(expiry):
    if not expiry:
        return 0
    if isinstance(expiry, (int, float)):
        return int(expiry)
    if isinstance(expiry, str) and expiry.isdigit():
        return int(expiry)
    if isinstance(expiry, datetime):
        return int(expiry.timestamp())
    return 0


def dump_netscape_cookies(cookies, out_path):
    """
    cookies: driver.get_cookies() 결과(list[dict])
    out_path: youtube_cookies.txt 경로
    """
    header = (
        "# Netscape HTTP Cookie File\n"
        "# This file was generated by task_orchestrator_cli; Edit at your own risk.\n"
        "# domain\tflag\tpath\tsecure\texpiration\tname\tvalue\n"
    )
    lines = [header]
    for c in cookies:
        domain = c.get("domain", "")
        if domain and not domain.startswith("."):
            domain = "." + domain  # 서브도메인 포함 인식
        flag = "TRUE" if domain.startswith(".") else "FALSE"
        path = c.get("path", "/") or "/"
        secure = "TRUE" if c.get("secure", False) else "FALSE"
        expiry = _to_epoch(c.get("expiry"))
        name = c.get("name", "")
        value = c.get("value", "")
        if not name:
            continue
        lines.append(f"{domain}\t{flag}\t{path}\t{secure}\t{expiry}\t{name}\t{value}\n")

    with open(out_path, "w", encoding="utf-8", newline="\n") as f:
        f.writelines(lines)


NEEDED_DOMAINS = [
    "https://www.youtube.com",
    "https://accounts.google.com",
    "https://www.google.com",
]


def collect_all_cookies(driver):
    merged = {}
    for url in NEEDED_DOMAINS:
        driver.get(url)
        # 필요시 짧게 대기
        driver.implicitly_wait(1)
        for c in driver.get_cookies():
            # (도메인, 이름) 키로 중복제거
            key = (c.get("domain"), c.get("name"))
            merged[key] = c
    return list(merged.values())


def ensure_youtube_login_via_selenium():
    """
    Selenium을 사용해서 YouTube에 자동으로 로그인하고 쿠키를 추출하는 함수
    
    Returns:
        bool: 로그인 및 쿠키 추출 성공 여부
    """
    try:
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        from selenium.common.exceptions import TimeoutException, NoSuchElementException

        logging.debug("Selenium을 사용한 YouTube 자동 로그인을 시작합니다...")

        # Chrome 옵션 설정 (디버깅 모드)
        chrome_options = Options()
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)

        # 디버깅을 위한 추가 옵션
        chrome_options.add_argument("--start-maximized")  # 브라우저 최대화
        chrome_options.add_argument("--disable-web-security")  # 웹 보안 비활성화
        chrome_options.add_argument("--allow-running-insecure-content")  # 안전하지 않은 콘텐츠 허용
        chrome_options.add_argument("--disable-features=VizDisplayCompositor")  # 성능 최적화

        # 브라우저 실행
        logging.debug("Chrome 브라우저를 시작하는 중...")
        driver = webdriver.Chrome(options=chrome_options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

        # 브라우저 창 크기 설정 및 위치 조정
        driver.set_window_size(1200, 800)
        driver.set_window_position(100, 100)
        logging.debug("Chrome 브라우저가 성공적으로 시작되었습니다.")

        try:
            # YouTube 로그인 페이지로 이동
            logging.debug("YouTube 로그인 페이지로 이동 중...")
            driver.get("https://accounts.google.com/signin/v2/identifier?service=youtube")
            logging.debug(f"현재 URL: {driver.current_url}")

            # 사용자 입력 대기
            logging.debug("사용자 입력을 기다리는 중...")
            logging.debug("브라우저에서 수동으로 로그인을 완료해주세요.")
            logging.debug("로그인이 완료되면 Enter 키를 눌러주세요.")

            # pk_option : ensure_mouse_clicked_by_coordination_history
            func_n = get_caller_n()

            key_name = "윈도우 패스키 자동완성"
            ensure_mouse_clicked_by_coordination_history(key_name=key_name, func_n=func_n, history_reset=False)
            ensure_slept_by_following_history(key_name=key_name, func_n=func_n, history_reset=False)

            # pk_* : ensure_mouse_clicked_by_coordination_history
            key_name = "사용자 본인인증 인지 확인"
            ensure_mouse_clicked_by_coordination_history(key_name=key_name, func_n=func_n, history_reset=False)
            ensure_slept_by_following_history(key_name=key_name, func_n=func_n, history_reset=False)

            key_name = 'windows_passkey_password'
            selected = ensure_env_var_completed_advanced(key_name=key_name, func_n=func_n)
            windows_passkey_password = selected
            ensure_typed(windows_passkey_password)
            ensure_slept_by_following_history(key_name=key_name, func_n=func_n, history_reset=False)

            ensure_pressed("enter")
            ensure_slept_by_following_history(key_name=key_name, func_n=func_n, history_reset=False)

            key_name = "유튜브 알림표시 권한 허용"
            ensure_mouse_clicked_by_coordination_history(key_name=key_name, func_n=func_n, history_reset=False)
            ensure_slept_by_following_history(key_name=key_name, func_n=func_n, history_reset=False)

            key_name = "chrome 에 로그인"
            ensure_mouse_clicked_by_coordination_history(key_name=key_name, func_n=func_n, history_reset=False)
            ensure_slept_by_following_history(key_name=key_name, func_n=func_n, history_reset=False)

            # 사용자 입력 대기
            ensure_spoken("로그인이 완료되면 Enter 키를 눌러주세요")
            input("로그인이 완료되면 Enter 키를 눌러주세요: ")

            # YouTube 메인 페이지로 이동하여 쿠키 확인
            logging.debug("YouTube 메인 페이지로 이동 중...")
            driver.get("https://www.youtube.com")
            time.sleep(3)
            logging.debug(f"현재 URL: {driver.current_url}")

            # --- Start of new age confirmation logic ---
            AGE_RESTRICTED_VIDEO_URL = "https://www.youtube.com/watch?v=6jQOQQA7-eA"
            logging.debug(f"연령 제한 동영상 페이지로 이동 중: {AGE_RESTRICTED_VIDEO_URL}")
            driver.get(AGE_RESTRICTED_VIDEO_URL)
            time.sleep(5)  # Give more time for age gate to appear

            try:
                # Check for common age confirmation buttons
                # Example 1: "I understand and wish to proceed"
                proceed_button = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'I understand and wish to proceed')]"))
                )
                logging.debug("연령 확인 'I understand and wish to proceed' 버튼 발견. 클릭합니다.")
                proceed_button.click()
                time.sleep(3)  # Wait for page to react

            except TimeoutException:
                logging.debug("연령 확인 'I understand and wish to proceed' 버튼을 찾을 수 없습니다. 다른 요소를 확인합니다.")
                try:
                    # Example 2: Generic "Confirm" or "Yes" button
                    confirm_button = WebDriverWait(driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Confirm') or contains(., 'Yes')]"))
                    )
                    logging.debug("연령 확인 'Confirm' 또는 'Yes' 버튼 발견. 클릭합니다.")
                    confirm_button.click()
                    time.sleep(3)  # Wait for page to react
                except TimeoutException:
                    logging.debug("연령 확인 'Confirm' 또는 'Yes' 버튼을 찾을 수 없습니다. 연령 확인 프롬프트가 없거나 다른 형태입니다.")
                except NoSuchElementException:
                    logging.debug("연령 확인 'Confirm' 또는 'Yes' 버튼을 찾을 수 없습니다. 연령 확인 프롬프트가 없거나 다른 형태입니다.")
            except NoSuchElementException:
                logging.debug("연령 확인 'I understand and wish to proceed' 버튼을 찾을 수 없습니다. 다른 요소를 확인합니다.")
            except Exception as e:
                logging.debug(f"연령 확인 처리 중 예상치 못한 오류 발생: {e}")

            logging.debug(f"연령 제한 동영상 페이지 처리 완료. 현재 URL: {driver.current_url}")
            # --- End of new age confirmation logic ---

            # 쿠키 추출
            logging.debug("YouTube 쿠키를 추출하는 중...")
            cookies = collect_all_cookies(driver)
            logging.debug(f"총 쿠키 개수: {len(cookies)}")

            # YouTube 도메인 쿠키만 필터링
            youtube_cookies = [c for c in cookies if '.youtube.com' in c.get('domain', '')]
            logging.debug(f"YouTube 쿠키 개수: {len(youtube_cookies)}")

            # 중요한 쿠키들 확인
            important_cookies = ['SID', 'HSID', 'SSID', 'APISID', 'SAPISID', '__Secure-1PSID', '__Secure-3PSID']
            found_cookies = [c['name'] for c in youtube_cookies if c['name'] in important_cookies]
            logging.debug(f"찾은 중요 쿠키: {found_cookies}")

            # Netscape 형식으로 쿠키 파일 생성
            logging.debug("쿠키 파일을 생성하는 중...")
            dump_netscape_cookies(
                cookies,
                F_YOUTUBE_COOKIES_TXT
            )

            logging.debug(f"YouTube 쿠키가 성공적으로 저장되었습니다: {F_YOUTUBE_COOKIES_TXT}")

            # driver.quit()
            # logging.debug("브라우저가 닫혔습니다.")
            return True

        except:
            ensure_debug_loged_verbose(traceback)
            return False
        finally:
            ensure_spoken(wait=True)
            driver.quit()


    except ImportError:
        logging.debug("Selenium 라이브러리가 설치되지 않았습니다.")
        logging.debug("설치 방법: pip install selenium")
        logging.debug("또는: uv add selenium")
        return False
    except Exception as e:
        logging.debug(f"YouTube 로그인 실패: {e}")
        return False


def get_youtube_selenium_login_help():
    """
    Selenium을 사용한 YouTube 로그인 도움말을 출력하는 함수
    """
    help_text = """
 Selenium을 사용한 YouTube 자동 로그인 방법:

1. 함수 실행: ensure_youtube_login_via_selenium()
2. Chrome 브라우저가 자동으로 열림
3. YouTube 로그인 페이지로 이동
4. 수동으로 로그인 정보 입력
5. 로그인 완료 후 Enter 키 입력
6. 자동으로 쿠키 추출 및 저장

 장점:
- 관리자 권한 불필요
- 실제 브라우저 세션 사용
- 안정적인 쿠키 추출
- 자동화 가능

️ 주의사항:
- 로그인 정보는 수동 입력 필요
- 2단계 인증이 설정된 경우 추가 인증 필요
- 브라우저가 자동으로 닫힘
"""

    logging.debug(help_text)


if __name__ == "__main__":
    ensure_youtube_login_via_selenium()
    get_youtube_selenium_login_help()
