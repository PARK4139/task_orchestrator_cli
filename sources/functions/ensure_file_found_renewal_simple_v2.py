#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ensure_file_found_renewal_simple_v2.py - ÏàòÏ†ïÎêú ÏïàÏ†ï Î≤ÑÏ†Ñ

ÌäπÏßï:
1. Î≥µÏû°Ìïú Î≥ºÎ•® Î∞úÍ≤¨ ÏóÜÏù¥ ÏßÅÏ†ë Í≤ΩÎ°ú Ïä§Ï∫î
2. ÏÉÅÏÑ∏Ìïú Í≤ÄÏÉâ Í≤∞Í≥º Î°úÍπÖ
3. ÌÉ≠ ÏûêÎèôÏôÑÏÑ± Í∏∞Î∞ò ÏÇ¨Ïö©Ïûê Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
4. ÌÖåÏä§Ìä∏ Î™®Îìú ÏôÑÏ†Ñ Íµ¨ÌòÑ
5. UnboundLocalError Î¨∏Ï†ú Ìï¥Í≤∞
"""

import os
import sys
import logging
import time
from pathlib import Path
from typing import Optional, List, Dict, Any

def _get_lazy_imports():
    """ÏßÄÏó∞ import - print Î≥ÄÏàò Ï∂©Îèå Î¨∏Ï†ú Ìï¥Í≤∞"""
    try:
        import logging
        from sources.functions.ensure_value_completed import ensure_value_completed
        from sources.objects.task_orchestrator_cli_directories import D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI
        return ensure_value_completed, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI
    except ImportError:
        def ensure_value_completed(key_hint, values):
            print(f"{key_hint}")
            for i, value in enumerate(values, 1):
                print(f"  {i}. {value}")
            choice = input("ÏÑ†ÌÉù: ").strip()
            try:
                return values[int(choice) - 1]
            except (ValueError, IndexError):
                return choice if choice in values else values[0]
        
        D_TASK_ORCHESTRATOR_CLI_LOGS = Path.cwd() / "logs"
        D_TASK_ORCHESTRATOR_CLI = Path.cwd()
        return ensure_value_completed, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI

def _setup_logging():
    """Î°úÍπÖ ÏÑ§Ï†ï"""
    ensure_value_completed, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI = _get_lazy_imports()
    D_TASK_ORCHESTRATOR_CLI_LOGS.mkdir(parents=True, exist_ok=True)
    
    log_file = D_TASK_ORCHESTRATOR_CLI_LOGS / "file_search_simple.log"
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )

_setup_logging()

def ensure_file_found_renewal_simple():
    """Í∞ÑÎã®Ìïú ÎåÄÌôîÌòï ÌååÏùº Í≤ÄÏÉâ"""
    
    ensure_value_completed, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI = _get_lazy_imports()
    
    print("üîç Í∞ÑÎã®Ìïú ÌååÏùº Í≤ÄÏÉâ ÏãúÏä§ÌÖú")
    print(PK_UNDERLINE)
    
    # 1. Î™®Îìú ÏÑ†ÌÉù
    available_modes = [
        "ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏ Í≤ÄÏÉâ",
        "Downloads Ìè¥Îçî Í≤ÄÏÉâ", 
        "Ï†ÑÏ≤¥ CÎìúÎùºÏù¥Î∏å Í≤ÄÏÉâ",
        "ÏÇ¨Ïö©Ïûê Ï†ïÏùò Í≤ΩÎ°ú Í≤ÄÏÉâ",
        "ÌÖåÏä§Ìä∏ Î™®Îìú (ÏïàÏ†Ñ Í≤ÄÏ¶ù)",
        "ÎèÑÏõÄÎßê"
    ]
    
    mode = ensure_value_completed(
        key_hint="Í≤ÄÏÉâ Î™®Îìú ÏÑ†ÌÉù: ",
        values=available_modes
    )
    
    if mode == "ÎèÑÏõÄÎßê":
        _show_simple_help()
        return
    
    # 2. Í≤ÄÏÉâ Í≤ΩÎ°ú ÏÑ§Ï†ï
    if mode == "ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏ Í≤ÄÏÉâ":
        search_path = D_TASK_ORCHESTRATOR_CLI
    elif mode == "Downloads Ìè¥Îçî Í≤ÄÏÉâ":
        search_path = Path.home() / "Downloads"
    elif mode == "Ï†ÑÏ≤¥ CÎìúÎùºÏù¥Î∏å Í≤ÄÏÉâ":
        search_path = Path("C:/")
    elif mode == "ÏÇ¨Ïö©Ïûê Ï†ïÏùò Í≤ΩÎ°ú Í≤ÄÏÉâ":
        path_options = [
            str(D_TASK_ORCHESTRATOR_CLI),
            str(Path.home() / "Downloads"),
            str(Path.home() / "Documents"),
            "C:/",
            "D:/",
            "ÏÇ¨Ïö©Ïûê ÏûÖÎ†•"
        ]
        
        path_choice = ensure_value_completed(
            key_hint="Í≤ÄÏÉâÌï† Í≤ΩÎ°ú: ",
            values=path_options
        )
        
        if path_choice == "ÏÇ¨Ïö©Ïûê ÏûÖÎ†•":
            custom_path = input("Í≤ΩÎ°úÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî: ").strip()
            search_path = Path(custom_path)
        else:
            search_path = Path(path_choice)
    else:  # ÌÖåÏä§Ìä∏ Î™®Îìú
        _run_test_mode()
        return
    
    # 3. Í≤ÄÏÉâ Î∞©Ïãù ÏÑ†ÌÉù
    search_methods = [
        "ÌååÏùºÎ™ÖÎßå Í≤ÄÏÉâ (Îπ†Î¶Ñ)",
        "ÌååÏùº ÎÇ¥Ïö©ÎèÑ Í≤ÄÏÉâ (ÎäêÎ¶º)",
        "fzf Ïã§ÏãúÍ∞Ñ Í≤ÄÏÉâ",
        "Everything ÏÇ¨Ïö© (Í∞ÄÏû• Îπ†Î¶Ñ)"
    ]
    
    method = ensure_value_completed(
        key_hint="Í≤ÄÏÉâ Î∞©Ïãù: ",
        values=search_methods
    )
    
    # 4. Í≤ÄÏÉâÏñ¥ ÏûÖÎ†•
    search_query = ensure_value_completed(
        key_hint="Í≤ÄÏÉâÏñ¥: ",
        values=[
            "ensure_",
            "test_",
            "*.py",
            "*.md", 
            "renewal",
            "file_found",
            "ÏÇ¨Ïö©Ïûê ÏûÖÎ†•"
        ]
    )
    
    if search_query == "ÏÇ¨Ïö©Ïûê ÏûÖÎ†•":
        search_query = input("Í≤ÄÏÉâÏñ¥Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî: ").strip()
    
    if not search_query:
        print("Í≤ÄÏÉâÏñ¥Í∞Ä ÏóÜÏäµÎãàÎã§.")
        return
    
    # 5. Í≤ÄÏÉâ Ïã§Ìñâ
    print(f"üîç Í≤ÄÏÉâ ÏãúÏûë: '{search_query}' in {search_path}")
    
    start_time = time.time()
    
    if method == "ÌååÏùºÎ™ÖÎßå Í≤ÄÏÉâ (Îπ†Î¶Ñ)":
        results = _search_filenames_only(search_path, search_query)
    elif method == "ÌååÏùº ÎÇ¥Ïö©ÎèÑ Í≤ÄÏÉâ (ÎäêÎ¶º)":
        results = _search_with_content(search_path, search_query)
    elif method == "fzf Ïã§ÏãúÍ∞Ñ Í≤ÄÏÉâ":
        results = _search_with_fzf(search_path, search_query)
    elif method == "Everything ÏÇ¨Ïö© (Í∞ÄÏû• Îπ†Î¶Ñ)":
        results = _search_with_everything(search_query)
    else:
        results = []
    
    end_time = time.time()
    search_duration = end_time - start_time
    
    # ÏÉÅÏÑ∏ Í≤ÄÏÉâ Í≤∞Í≥º Î°úÍπÖ
    logging.info(f"üìä Í≤ÄÏÉâ ÏôÑÎ£å ÌÜµÍ≥Ñ:")
    logging.info(f"   Í≤ÄÏÉâÏñ¥: '{search_query}'")
    logging.info(f"   Í≤ÄÏÉâ Í≤ΩÎ°ú: {search_path}")
    logging.info(f"   Í≤ÄÏÉâ Î∞©Ïãù: {method}")
    logging.info(f"   Í≤ÄÏÉâ Í≤∞Í≥º: {len(results)}Í∞ú")
    logging.info(f"   Í≤ÄÏÉâ ÏãúÍ∞Ñ: {search_duration:.3f}Ï¥à")
    
    if results:
        # Í≤∞Í≥ºÎ≥Ñ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Î°úÍπÖ
        total_size = sum(r.get('size', 0) for r in results)
        avg_size = total_size / len(results) if results else 0
        
        logging.info(f"   Ï¥ù ÌååÏùº ÌÅ¨Í∏∞: {total_size / (1024*1024):.1f} MB")
        logging.info(f"   ÌèâÍ∑† ÌååÏùº ÌÅ¨Í∏∞: {avg_size / 1024:.1f} KB")
        
        # ÌååÏùº ÌÉÄÏûÖÎ≥Ñ ÌÜµÍ≥Ñ
        extensions = {}
        for result in results:
            ext = Path(result['path']).suffix.lower()
            extensions[ext] = extensions.get(ext, 0) + 1
        
        logging.info(f"   ÌååÏùº ÌÉÄÏûÖ Î∂ÑÌè¨: {dict(sorted(extensions.items(), key=lambda x: x[1], reverse=True))}")
    
    # ÏÇ¨Ïö©ÏûêÏóêÍ≤å Í≤∞Í≥º ÌëúÏãú
    print(f"üéØ Í≤ÄÏÉâ ÏôÑÎ£å: {len(results)}Í∞ú ÌååÏùº Î∞úÍ≤¨ ({search_duration:.2f}Ï¥à)")
    
    if not results:
        print("üí° Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§. Îã§Î•∏ Í≤ÄÏÉâÏñ¥ÎÇò Í≤ΩÎ°úÎ•º ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî.")
        return
    
    # 6. Í≤∞Í≥º ÌëúÏãú Î∞©Ïãù ÏÑ†ÌÉù
    display_options = [
        "ÏÉÅÏúÑ 10Í∞úÎßå Î≥¥Í∏∞",
        "Î™®Îì† Í≤∞Í≥º Î≥¥Í∏∞",
        "fzfÎ°ú ÏÑ†ÌÉùÌïòÍ∏∞",
        "ÌååÏùºÎ°ú Ï†ÄÏû•ÌïòÍ∏∞"
    ]
    
    display_choice = ensure_value_completed(
        key_hint="Í≤∞Í≥º ÌëúÏãú Î∞©Ïãù: ",
        values=display_options
    )
    
    if display_choice == "ÏÉÅÏúÑ 10Í∞úÎßå Î≥¥Í∏∞":
        _display_top_results(results[:10])
    elif display_choice == "Î™®Îì† Í≤∞Í≥º Î≥¥Í∏∞":
        _display_all_results(results)
    elif display_choice == "fzfÎ°ú ÏÑ†ÌÉùÌïòÍ∏∞":
        _display_with_fzf(results)
    elif display_choice == "ÌååÏùºÎ°ú Ï†ÄÏû•ÌïòÍ∏∞":
        _save_results_to_file(results, search_query)

def _search_filenames_only(search_path: Path, query: str) -> List[Dict[str, Any]]:
    """ÌååÏùºÎ™ÖÎßå Í≤ÄÏÉâ"""
    ensure_value_completed, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI = _get_lazy_imports()
    
    results = []
    files_scanned = 0
    
    try:
        for root, dirs, files in os.walk(search_path):
            # Ï†úÏô∏Ìï† ÎîîÎ†âÌÜ†Î¶¨
            dirs[:] = [d for d in dirs if d not in ['.git', '__pycache__', '.venv', 'node_modules']]
            
            for file in files:
                files_scanned += 1
                
                # Í≤ÄÏÉâÏñ¥ Îß§Ïπ≠ (ÎåÄÏÜåÎ¨∏Ïûê Î¨¥Ïãú)
                if query.lower() in file.lower() or query.lower() in root.lower():
                    file_path = Path(root) / file
                    try:
                        stat = file_path.stat()
                        results.append({
                            'path': str(file_path),
                            'name': file,
                            'size': stat.st_size,
                            'mtime': stat.st_mtime,
                            'dir': root
                        })
                    except Exception:
                        continue
    
    except Exception as e:
        logging.error(f"Filename search failed: {e}")
    
    logging.info(f"ÌååÏùºÎ™Ö Í≤ÄÏÉâ: {files_scanned}Í∞ú ÌååÏùº Ïä§Ï∫î, {len(results)}Í∞ú Îß§Ïπ≠")
    return results

def _search_with_content(search_path: Path, query: str) -> List[Dict[str, Any]]:
    """ÌååÏùº ÎÇ¥Ïö© Ìè¨Ìï® Í≤ÄÏÉâ"""
    ensure_value_completed, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI = _get_lazy_imports()
    
    results = []
    files_scanned = 0
    content_matches = 0
    
    text_extensions = ['.py', '.txt', '.md', '.json', '.yaml', '.yml', '.toml', '.cfg', '.ini', '.log']
    
    try:
        for root, dirs, files in os.walk(search_path):
            dirs[:] = [d for d in dirs if d not in ['.git', '__pycache__', '.venv', 'node_modules']]
            
            for file in files:
                files_scanned += 1
                file_path = Path(root) / file
                
                # ÌååÏùºÎ™Ö Îß§Ïπ≠
                name_match = query.lower() in file.lower() or query.lower() in root.lower()
                content_match = False
                
                # ÌÖçÏä§Ìä∏ ÌååÏùºÏù∏ Í≤ΩÏö∞ ÎÇ¥Ïö©ÎèÑ Í≤ÄÏÉâ
                if file_path.suffix.lower() in text_extensions:
                    try:
                        if file_path.stat().st_size < 1024 * 1024:  # 1MB ÎØ∏Îßå ÌååÏùºÎßå
                            content = file_path.read_text(encoding='utf-8', errors='ignore')
                            if query.lower() in content.lower():
                                content_match = True
                                content_matches += 1
                    except Exception:
                        pass
                
                if name_match or content_match:
                    try:
                        stat = file_path.stat()
                        results.append({
                            'path': str(file_path),
                            'name': file,
                            'size': stat.st_size,
                            'mtime': stat.st_mtime,
                            'dir': root,
                            'match_type': 'content' if content_match else 'filename'
                        })
                    except Exception:
                        continue
    
    except Exception as e:
        logging.error(f"Content search failed: {e}")
    
    logging.info(f"ÎÇ¥Ïö© Í≤ÄÏÉâ: {files_scanned}Í∞ú ÌååÏùº Ïä§Ï∫î, {content_matches}Í∞ú ÎÇ¥Ïö© Îß§Ïπ≠, Ï¥ù {len(results)}Í∞ú Í≤∞Í≥º")
    return results

def _search_with_fzf(search_path: Path, query: str) -> List[Dict[str, Any]]:
    """fzfÎ•º ÏÇ¨Ïö©Ìïú Ïã§ÏãúÍ∞Ñ Í≤ÄÏÉâ"""
    import subprocess
    
    ensure_value_completed, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI = _get_lazy_imports()
    
    print("üìÅ ÌååÏùº Î™©Î°ù ÏÉùÏÑ± Ï§ë...")
    
    # ÌååÏùº Î™©Î°ù ÏÉùÏÑ±
    files = []
    for root, dirs, filenames in os.walk(search_path):
        dirs[:] = [d for d in dirs if d not in ['.git', '__pycache__', '.venv']]
        
        for filename in filenames:
            file_path = Path(root) / filename
            try:
                stat = file_path.stat()
                size_kb = stat.st_size / 1024
                mtime_str = time.strftime('%Y-%m-%d %H:%M', time.localtime(stat.st_mtime))
                files.append(f"{file_path}\t{size_kb:.1f}KB\t{mtime_str}")
            except Exception:
                continue
    
    if not files:
        print("Í≤ÄÏÉâÌï† ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§.")
        return []
    
    fzf_input = '\n'.join(files)
    
    # fzf Ïã§Ìñâ
    fzf_cmd = [
        'fzf',
        '--delimiter', '\t',
        '--with-nth', '1',
        '--preview', 'head -10 {1} 2>/dev/null || file {1}',
        '--preview-window', 'right:50%:wrap',
        '--query', query,  # Ï¥àÍ∏∞ Í≤ÄÏÉâÏñ¥ ÏÑ§Ï†ï
        '--header', f'Í≤ÄÏÉâ: {search_path} | CTRL-C: Ï∑®ÏÜå',
        '--height', '80%',
        '--layout', 'reverse',
        '--prompt', 'üîç ÌååÏùº ÏÑ†ÌÉù: '
    ]
    
    try:
        result = subprocess.run(fzf_cmd, input=fzf_input, text=True, capture_output=True)
        
        if result.returncode == 0 and result.stdout.strip():
            selected_files = result.stdout.strip().split('\n')
            
            results = []
            for file_line in selected_files:
                file_path = file_line.split('\t')[0]
                try:
                    stat = Path(file_path).stat()
                    results.append({
                        'path': file_path,
                        'name': Path(file_path).name,
                        'size': stat.st_size,
                        'mtime': stat.st_mtime,
                        'dir': str(Path(file_path).parent)
                    })
                except Exception:
                    continue
            
            logging.info(f"fzf Í≤ÄÏÉâ: {len(files)}Í∞ú ÌååÏùº Ï§ë {len(results)}Í∞ú ÏÑ†ÌÉù")
            return results
        else:
            logging.info("fzf Í≤ÄÏÉâ: ÏÑ†ÌÉù Ï∑®ÏÜå")
            return []
            
    except FileNotFoundError:
        print("‚ùå fzfÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
        print("üí° ÏÑ§Ïπò: choco install fzf (Windows) ÎòêÎäî sudo apt install fzf (Linux)")
        return []
    except Exception as e:
        logging.error(f"fzf search failed: {e}")
        return []

def _search_with_everything(query: str) -> List[Dict[str, Any]]:
    """EverythingÏùÑ ÏÇ¨Ïö©Ìïú Í≤ÄÏÉâ"""
    import subprocess
    
    ensure_value_completed, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI = _get_lazy_imports()
    
    # Everything Í≤ΩÎ°ú ÌôïÏù∏
    everything_paths = [
        r"C:\Program Files\Everything\Everything.exe",
        r"C:\Program Files (x86)\Everything\Everything.exe"
    ]
    
    everything_exe = None
    for path in everything_paths:
        if os.path.exists(path):
            everything_exe = path
            break
    
    if not everything_exe:
        print("‚ùå EverythingÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
        return []
    
    try:
        # Everything Î™ÖÎ†πÏ§Ñ Í≤ÄÏÉâ
        cmd = f'"{everything_exe}" -s "{query}" -a -f -sort -no-gui'
        
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            encoding='utf-8',
            timeout=30,
            creationflags=subprocess.CREATE_NO_WINDOW
        )
        
        if result.returncode == 0 and result.stdout.strip():
            file_paths = result.stdout.strip().split('\n')
            
            results = []
            for file_path in file_paths:
                try:
                    path_obj = Path(file_path)
                    if path_obj.exists():
                        stat = path_obj.stat()
                        results.append({
                            'path': file_path,
                            'name': path_obj.name,
                            'size': stat.st_size,
                            'mtime': stat.st_mtime,
                            'dir': str(path_obj.parent)
                        })
                except Exception:
                    continue
            
            logging.info(f"Everything Í≤ÄÏÉâ: {len(file_paths)}Í∞ú Í≤ΩÎ°ú Ï§ë {len(results)}Í∞ú Ïú†Ìö®Ìïú ÌååÏùº")
            return results
        else:
            logging.info("Everything Í≤ÄÏÉâ: Í≤∞Í≥º ÏóÜÏùå")
            return []
            
    except Exception as e:
        logging.error(f"Everything search failed: {e}")
        return []

def _run_test_mode():
    """ÌÖåÏä§Ìä∏ Î™®Îìú Ïã§Ìñâ"""
    ensure_value_completed, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI = _get_lazy_imports()
    
    print("üß™ ÌÖåÏä§Ìä∏ Î™®Îìú ÏãúÏûë")
    print("=" * 40)
    
    test_options = [
        "Í≤ÄÏÉâ ÏïåÍ≥†Î¶¨Ï¶ò ÏÑ±Îä• ÌÖåÏä§Ìä∏",
        "fzf Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ ÌÖåÏä§Ìä∏",
        "ÌååÏùº ÌÉÄÏûÖÎ≥Ñ Í≤ÄÏÉâ ÌÖåÏä§Ìä∏",
        "ÎåÄÏö©Îüâ ÎîîÎ†âÌÜ†Î¶¨ ÌÖåÏä§Ìä∏",
        "Ïò§Î•ò Ï≤òÎ¶¨ ÌÖåÏä§Ìä∏"
    ]
    
    test_choice = ensure_value_completed(
        key_hint="ÌÖåÏä§Ìä∏ Ï¢ÖÎ•ò: ",
        values=test_options
    )
    
    if test_choice == "Í≤ÄÏÉâ ÏïåÍ≥†Î¶¨Ï¶ò ÏÑ±Îä• ÌÖåÏä§Ìä∏":
        _test_search_performance()
    elif test_choice == "fzf Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ ÌÖåÏä§Ìä∏":
        _test_fzf_interface()
    elif test_choice == "ÌååÏùº ÌÉÄÏûÖÎ≥Ñ Í≤ÄÏÉâ ÌÖåÏä§Ìä∏":
        _test_file_type_search()
    elif test_choice == "ÎåÄÏö©Îüâ ÎîîÎ†âÌÜ†Î¶¨ ÌÖåÏä§Ìä∏":
        _test_large_directory()
    elif test_choice == "Ïò§Î•ò Ï≤òÎ¶¨ ÌÖåÏä§Ìä∏":
        _test_error_handling()

def _test_search_performance():
    """Í≤ÄÏÉâ ÏÑ±Îä• ÌÖåÏä§Ìä∏"""
    ensure_value_completed, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI = _get_lazy_imports()
    
    print("‚ö° Í≤ÄÏÉâ ÏÑ±Îä• ÌÖåÏä§Ìä∏")
    
    test_queries = ["ensure_", "test_", "*.py", "file", "renewal"]
    test_path = D_TASK_ORCHESTRATOR_CLI
    
    for query in test_queries:
        print(f"\nüîç ÌÖåÏä§Ìä∏ Í≤ÄÏÉâÏñ¥: '{query}'")
        
        # ÏÑ±Îä• Ï∏°Ï†ï
        start_time = time.time()
        results = _search_filenames_only(test_path, query)
        end_time = time.time()
        
        duration = end_time - start_time
        rate = len(results) / (duration + 1e-9)
        
        print(f"   Í≤∞Í≥º: {len(results)}Í∞ú")
        print(f"   ÏãúÍ∞Ñ: {duration:.3f}Ï¥à")
        print(f"   ÏÜçÎèÑ: {rate:.0f} results/sec")
        
        # ÏÑ±Îä• ÌèâÍ∞Ä
        if duration < 0.1:
            print("   ÌèâÍ∞Ä: üöÄ Îß§Ïö∞ Îπ†Î¶Ñ")
        elif duration < 1.0:
            print("   ÌèâÍ∞Ä: ‚ö° Îπ†Î¶Ñ")
        elif duration < 5.0:
            print("   ÌèâÍ∞Ä: üêå Î≥¥ÌÜµ")
        else:
            print("   ÌèâÍ∞Ä: üê¢ ÎäêÎ¶º")

def _test_fzf_interface():
    """fzf Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ ÌÖåÏä§Ìä∏"""
    ensure_value_completed, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI = _get_lazy_imports()
    
    print("üé® fzf Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ ÌÖåÏä§Ìä∏")
    
    # ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    test_files = []
    for py_file in (D_TASK_ORCHESTRATOR_CLI / "resources" / "functions").glob("*.py"):
        test_files.append(str(py_file))
    
    if test_files:
        results = _search_with_fzf(D_TASK_ORCHESTRATOR_CLI, "ensure_")
        print(f"‚úÖ fzf ÌÖåÏä§Ìä∏ ÏôÑÎ£å: {len(results)}Í∞ú ÏÑ†ÌÉù")
    else:
        print("‚ùå ÌÖåÏä§Ìä∏Ìï† ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§.")

def _display_top_results(results: List[Dict[str, Any]]):
    """ÏÉÅÏúÑ Í≤∞Í≥º ÌëúÏãú"""
    ensure_value_completed, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI = _get_lazy_imports()
    
    for i, result in enumerate(results, 1):
        size_mb = result['size'] / (1024 * 1024)
        mtime_str = time.strftime('%Y-%m-%d %H:%M', time.localtime(result['mtime']))
        
        print(f"{i:2d}. {result['name']}")
        print(f"    üìÅ {result['dir']}")
        print(f"    üìä {size_mb:.1f}MB, {mtime_str}")

def _display_with_fzf(results: List[Dict[str, Any]]):
    """fzfÎ°ú Í≤∞Í≥º ÌëúÏãú"""
    import subprocess
    
    ensure_value_completed, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI = _get_lazy_imports()
    
    if not results:
        return
    
    # fzf ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ
    fzf_lines = []
    for result in results:
        size_mb = result['size'] / (1024 * 1024)
        mtime_str = time.strftime('%Y-%m-%d %H:%M', time.localtime(result['mtime']))
        fzf_lines.append(f"{result['path']}\t{size_mb:.1f}MB\t{mtime_str}")
    
    fzf_input = '\n'.join(fzf_lines)
    
    try:
        subprocess.run([
            'fzf',
            '--delimiter', '\t',
            '--with-nth', '1',
            '--preview', 'head -20 {1} 2>/dev/null || file {1}',
            '--header', f'Í≤ÄÏÉâ Í≤∞Í≥º: {len(results)}Í∞ú ÌååÏùº',
            '--height', '80%'
        ], input=fzf_input, text=True)
        
    except FileNotFoundError:
        print("‚ùå fzfÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
    except Exception as e:
        print(f"‚ùå fzf Ïã§Ìñâ Ïò§Î•ò: {e}")

def _save_results_to_file(results: List[Dict[str, Any]], query: str):
    """Í≤ÄÏÉâ Í≤∞Í≥ºÎ•º ÌååÏùºÎ°ú Ï†ÄÏû•"""
    ensure_value_completed, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI = _get_lazy_imports()
    
    timestamp = time.strftime('%Y%m%d_%H%M%S')
    filename = D_TASK_ORCHESTRATOR_CLI_LOGS / f"search_results_{query.replace('*', 'star')}_{timestamp}.txt"
    
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"Í≤ÄÏÉâ Í≤∞Í≥º: '{query}'\n")
            f.write(f"Í≤ÄÏÉâ ÏãúÍ∞Ñ: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Ï¥ù Í≤∞Í≥º: {len(results)}Í∞ú\n")
            f.write("=" * 80 + "\n\n")
            
            for i, result in enumerate(results, 1):
                size_mb = result['size'] / (1024 * 1024)
                mtime_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(result['mtime']))
                
                f.write(f"{i:4d}. {result['name']}\n")
                f.write(f"       Í≤ΩÎ°ú: {result['path']}\n")
                f.write(f"       ÌÅ¨Í∏∞: {size_mb:.1f}MB\n")
                f.write(f"       ÏàòÏ†ï: {mtime_str}\n")
                if 'match_type' in result:
                    f.write(f"       Îß§Ïπ≠: {result['match_type']}\n")
                f.write("\n")
        
        print(f"‚úÖ Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§: {filename}")
        logging.info(f"Search results saved to: {filename}")
        
    except Exception as e:
        print(f"‚ùå ÌååÏùº Ï†ÄÏû• Ïã§Ìå®: {e}")

def _test_file_type_search():
    """ÌååÏùº ÌÉÄÏûÖÎ≥Ñ Í≤ÄÏÉâ ÌÖåÏä§Ìä∏"""
    ensure_value_completed, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI = _get_lazy_imports()
    
    print("üìÑ ÌååÏùº ÌÉÄÏûÖÎ≥Ñ Í≤ÄÏÉâ ÌÖåÏä§Ìä∏")
    
    test_extensions = ["*.py", "*.md", "*.json", "*.toml", "*.txt"]
    
    for ext in test_extensions:
        print(f"\nüîç ÌÖåÏä§Ìä∏: {ext}")
        start_time = time.time()
        results = _search_filenames_only(D_TASK_ORCHESTRATOR_CLI, ext.replace('*', ''))
        duration = time.time() - start_time
        print(f"   Í≤∞Í≥º: {len(results)}Í∞ú ÌååÏùº ({duration:.3f}Ï¥à)")

def _test_large_directory():
    """ÎåÄÏö©Îüâ ÎîîÎ†âÌÜ†Î¶¨ ÌÖåÏä§Ìä∏"""
    ensure_value_completed, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI = _get_lazy_imports()
    
    print("üóÇÔ∏è ÎåÄÏö©Îüâ ÎîîÎ†âÌÜ†Î¶¨ ÌÖåÏä§Ìä∏")
    
    large_paths = [
        Path("C:/Windows"),
        Path("C:/Program Files"),
        Path.home() / "Downloads"
    ]
    
    for path in large_paths:
        if path.exists():
            print(f"\nüìÅ ÌÖåÏä§Ìä∏ Í≤ΩÎ°ú: {path}")
            start_time = time.time()
            
            # Ï†úÌïúÎêú Í≤ÄÏÉâ (ÏïàÏ†ÑÏÑ±ÏùÑ ÏúÑÌï¥)
            file_count = 0
            try:
                for root, dirs, files in os.walk(path):
                    dirs[:] = dirs[:5]  # ÏµúÎåÄ 5Í∞ú ÌïòÏúÑ ÎîîÎ†âÌÜ†Î¶¨Îßå
                    file_count += len(files)
                    if file_count > 10000:  # 10000Í∞ú ÌååÏùº Ï†úÌïú
                        break
            except Exception as e:
                print(f"   Ïò§Î•ò: {e}")
                continue
            
            duration = time.time() - start_time
            print(f"   Ïä§Ï∫îÎêú ÌååÏùº: {file_count}Í∞ú")
            print(f"   ÏÜåÏöî ÏãúÍ∞Ñ: {duration:.3f}Ï¥à")
            print(f"   Ï≤òÎ¶¨ ÏÜçÎèÑ: {file_count/(duration+1e-9):.0f} files/sec")

def _test_error_handling():
    """Ïò§Î•ò Ï≤òÎ¶¨ ÌÖåÏä§Ìä∏"""
    ensure_value_completed, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI = _get_lazy_imports()
    
    print("‚ö†Ô∏è Ïò§Î•ò Ï≤òÎ¶¨ ÌÖåÏä§Ìä∏")
    
    # 1. Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Í≤ΩÎ°ú ÌÖåÏä§Ìä∏
    print("\n1. Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Í≤ΩÎ°ú ÌÖåÏä§Ìä∏")
    fake_path = Path("C:/NonExistentDirectory123456")
    results = _search_filenames_only(fake_path, "test")
    print(f"   Í≤∞Í≥º: {len(results)}Í∞ú (ÏòàÏÉÅ: 0Í∞ú)")
    
    # 2. Í∂åÌïú ÏóÜÎäî Í≤ΩÎ°ú ÌÖåÏä§Ìä∏
    print("\n2. Í∂åÌïú Ï†úÌïú Í≤ΩÎ°ú ÌÖåÏä§Ìä∏")
    restricted_path = Path("C:/System Volume Information")
    if restricted_path.exists():
        results = _search_filenames_only(restricted_path, "test")
        print(f"   Í≤∞Í≥º: {len(results)}Í∞ú")
    else:
        print("   Ìï¥Îãπ Í≤ΩÎ°úÍ∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùå")
    
    # 3. Îπà Í≤ÄÏÉâÏñ¥ ÌÖåÏä§Ìä∏
    print("\n3. Îπà Í≤ÄÏÉâÏñ¥ ÌÖåÏä§Ìä∏")
    results = _search_filenames_only(D_TASK_ORCHESTRATOR_CLI, "")
    print(f"   Í≤∞Í≥º: {len(results)}Í∞ú")

def _display_all_results(results: List[Dict[str, Any]]):
    """Î™®Îì† Í≤∞Í≥º ÌëúÏãú"""
    _display_top_results(results)

def _show_simple_help():
    """Í∞ÑÎã®Ìïú ÎèÑÏõÄÎßê"""
    ensure_value_completed, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI = _get_lazy_imports()
    
    help_text = """
üîç Í∞ÑÎã®Ìïú ÌååÏùº Í≤ÄÏÉâ ÏãúÏä§ÌÖú

üöÄ ÏÇ¨Ïö©Î≤ï:
  1. Í≤ÄÏÉâ Î™®Îìú ÏÑ†ÌÉù (ÌÉ≠ÏúºÎ°ú ÏûêÎèôÏôÑÏÑ±)
  2. Í≤ÄÏÉâ Î∞©Ïãù ÏÑ†ÌÉù
  3. Í≤ÄÏÉâÏñ¥ ÏûÖÎ†•
  4. Í≤∞Í≥º ÌôïÏù∏

üìÅ Í≤ÄÏÉâ Î™®Îìú:
  - ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏: Îπ†Î•¥Í≥† Ï†ïÌôï
  - Downloads: Îã§Ïö¥Î°úÎìú ÌååÏùº Í≤ÄÏÉâ
  - CÎìúÎùºÏù¥Î∏å: Ï†ÑÏ≤¥ ÏãúÏä§ÌÖú Í≤ÄÏÉâ
  - ÏÇ¨Ïö©Ïûê Ï†ïÏùò: ÏõêÌïòÎäî Í≤ΩÎ°ú ÏßÄÏ†ï

üîç Í≤ÄÏÉâ Î∞©Ïãù:
  - ÌååÏùºÎ™ÖÎßå: Í∞ÄÏû• Îπ†Î¶Ñ
  - ÎÇ¥Ïö© Ìè¨Ìï®: Ï†ïÌôïÌïòÏßÄÎßå ÎäêÎ¶º
  - fzf Ïã§ÏãúÍ∞Ñ: ÎåÄÌôîÌòï Í≤ÄÏÉâ
  - Everything: ÏãúÏä§ÌÖú Ï†ÑÏ≤¥ Ï¥àÍ≥†ÏÜç

üß™ ÌÖåÏä§Ìä∏ Î™®Îìú:
  - ÏïàÏ†ÑÌïú Í∏∞Îä• Í≤ÄÏ¶ù
  - Ïã§Ï†ú ÏãúÏä§ÌÖú ÏòÅÌñ• ÏóÜÏùå
  - ÏÑ±Îä• Ï∏°Ï†ï Î∞è Î≤§ÏπòÎßàÌÇπ
"""
    
    print(help_text)

if __name__ == "__main__":
    ensure_file_found_renewal_simple()
