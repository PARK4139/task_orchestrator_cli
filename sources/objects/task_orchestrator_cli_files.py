from functions import get_time_as_
from functions.get_nx import get_nx
from objects.pk_local_test_activate import LTA
from sources.objects.task_orchestrator_cli_directories import (
    D_DOWNLOADS, D_TASK_ORCHESTRATOR_CLI_SOUND, D_TASK_ORCHESTRATOR_CLI_VIDEO, D_TASK_ORCHESTRATOR_CLI_RESOURCES_WINDOWS,
    D_TASK_ORCHESTRATOR_CLI_CACHE, D_C_DRIVE, D_ETC,
    D_TASK_ORCHESTRATOR_CLI_SENSITIVE, D_TASK_ORCHESTRATOR_CLI_LOGS, D_TASK_ORCHESTRATOR_CLI, D_TASK_ORCHESTRATOR_CLI_OS_LAYER_RESOURCES,
    D_TASK_ORCHESTRATOR_CLI_FUNCTIONS, D_TASK_ORCHESTRATOR_CLI_WRAPPERS, D_PK_MEMO, D_PK_RECYCLE_BIN, D_TASK_ORCHESTRATOR_CLI_RESOURCES, D_DESKTOP,
    D_USERPROFILE, D_VENV
)

F_VENV_PYTHON_EXE = D_VENV / "Scripts" / "python.exe"
F_VENV_ACTIVATE_BAT = D_VENV / "Scripts" / "activate.bat"
F_VENV_PYTHON = D_VENV / "Scripts" / "python3"
F_VENV_ACTIVATE = D_VENV / "Scripts" / "activate"

F_WSL_SSHD_CONFIG = D_ETC / "ssh" / "sshd_config"

F_PK_MEMO_SQLITE = D_PK_MEMO / "pk_memo.sqlite"
F_MEMO_WORKING_MD = D_PK_MEMO / "pk_memo_working.md"

# F_ENSURE_PK_ALIAS_ENABLED_BAT = D_PK_RECYCLE_BIN / "ensure_pk_alias_enabled.bat"
F_ENSURE_TASK_ORCHESTRATOR_CLI_LNK_RAN_BAT = D_PK_RECYCLE_BIN / "ensure_task_orchestrator_cli_lnk_executed.bat"
F_TEMP_PS1 = D_PK_RECYCLE_BIN / "temp.ps1"
F_TEMP_BAT = D_PK_RECYCLE_BIN / "temp.bat"
F_TEMP_CMD = D_PK_RECYCLE_BIN / "temp.cmd"
F_TEMP_PY = D_PK_RECYCLE_BIN / "temp.py"

if LTA:
    F_TASK_ORCHESTRATOR_CLI_LOG = D_TASK_ORCHESTRATOR_CLI_LOGS / f"task_orchestrator_cli.log"
    F_PK_TEMP_LOG = D_TASK_ORCHESTRATOR_CLI_LOGS / f"pk_temp.log"
else:
    F_TASK_ORCHESTRATOR_CLI_LOG = D_TASK_ORCHESTRATOR_CLI_LOGS / f"task_orchestrator_cli_{get_time_as_('now')}.log"
    F_PK_TEMP_LOG = D_TASK_ORCHESTRATOR_CLI_LOGS / f"pk_temp_via_{get_nx(__file__)}_{get_time_as_('now')}.log"

F_SUCCESS_LOG = D_TASK_ORCHESTRATOR_CLI_LOGS / 'success.log'
F_MACRO_LOG = D_TASK_ORCHESTRATOR_CLI_LOGS / 'macro.log'
# F_PK_TEST_RESULTS_LOG = D_TASK_ORCHESTRATOR_CLI_LOGS / "pk_test_results.log"


F_ENSURE_PK_ALIAS_ENABLED_BAT = D_TASK_ORCHESTRATOR_CLI_OS_LAYER_RESOURCES / "ensure_pk_alias_enabled.bat"
# F_ENSURE_TASK_ORCHESTRATOR_CLI_LNK_RAN_BAT = D_TASK_ORCHESTRATOR_CLI_OS_LAYER_RESOURCES / "ensure_task_orchestrator_cli_lnk_executed.bat"
F_FZF = D_TASK_ORCHESTRATOR_CLI_OS_LAYER_RESOURCES / "fzf.exe"
F_ENSURE_CMD_EXE_RAN_AS_ADMIN_CMD = D_TASK_ORCHESTRATOR_CLI_OS_LAYER_RESOURCES / "ensure_cmd_exe_ran_as_admin.cmd"
F_ENSURE_TASK_ORCHESTRATOR_CLI_LNK_PINNED_PS1 = D_TASK_ORCHESTRATOR_CLI_OS_LAYER_RESOURCES / "ensure_task_orchestrator_cli_lnk_pinned.ps1"
F_ENSURE_CMD_EXE_RAN_AS_ADMIN = D_TASK_ORCHESTRATOR_CLI_OS_LAYER_RESOURCES / "ensure_cmd_exe_ran_as_admin.cmd"
F_UV_EXE = D_TASK_ORCHESTRATOR_CLI_OS_LAYER_RESOURCES / "uv.exe"
F_ENSURE_TASK_ORCHESTRATOR_CLI_ENABLED_CMD = D_TASK_ORCHESTRATOR_CLI_OS_LAYER_RESOURCES / 'ensure_task_orchestrator_cli_enabled.cmd'
F_ENSURE_TASK_ORCHESTRATOR_CLI_ENABLED_SH = D_TASK_ORCHESTRATOR_CLI_OS_LAYER_RESOURCES / 'ensure_task_orchestrator_cli_enabled.sh'

F_PK_ENSURE_TASK_ORCHESTRATOR_CLI_STARTED_PY = D_TASK_ORCHESTRATOR_CLI_WRAPPERS / "pk_ensure_task_orchestrator_cli_started.py"
F_PK_ENSURE_TASK_ORCHESTRATOR_CLI_ENABLED_PY = D_TASK_ORCHESTRATOR_CLI_WRAPPERS / "pk_ensure_task_orchestrator_cli_enabled.py"
F_PK_ENSURE_STARTUP_ROUTINE_ENABLED_PY = D_TASK_ORCHESTRATOR_CLI_WRAPPERS / "pk_ensure_routine_startup_enabled.py"
F_PK_ENSURE_PK_SCHEDULER_ENABLED_PY = D_TASK_ORCHESTRATOR_CLI_WRAPPERS / "pk_ensure_pk_scheduler_enabled.py"
F_PK_ENSURE_TEST_SCENARIO_EXECUTED_PY = D_TASK_ORCHESTRATOR_CLI_WRAPPERS / "pk_ensure_routine_test_executed.py"
F_TEST_PY = D_TASK_ORCHESTRATOR_CLI_WRAPPERS / "pk_test.py"
F_TEST_BAT = D_TASK_ORCHESTRATOR_CLI_WRAPPERS / "pk_test.bat"
F_TEST_PS1 = D_TASK_ORCHESTRATOR_CLI_WRAPPERS / "pk_test.ps1"

F_PYPROJECT_TOML = D_TASK_ORCHESTRATOR_CLI / 'pyproject.toml'
# F_TASK_ORCHESTRATOR_CLI_CONFIG_TOML = D_TASK_ORCHESTRATOR_CLI / "project_config.toml" # deprecated
F_LOCAL_PKG_CACHE_PRIVATE = D_TASK_ORCHESTRATOR_CLI / '__pycache__' / '__init__.cpython-312.pyc'
F_YT_DLP_EXE = D_TASK_ORCHESTRATOR_CLI / "system_resources" / "yt-dlp.exe"
F_JQ_WIN64_EXE = D_TASK_ORCHESTRATOR_CLI / "system_resources" / "jq-win64.exe"
# F_WORKING = D_TASK_ORCHESTRATOR_CLI / "tests" / "pk_working.py"

F_PYCHARM64_EXE = D_C_DRIVE / "Program Files" / "JetBrains" / "PyCharm 2025.2.1" / "bin" / "pycharm64.exe"
# F_POT_PLAYER = D_C_DRIVE / "Program Files" / "DAUM" / "PotPlayer" / "PotPlayerMini64.exe"
F_POT_PLAYER = D_C_DRIVE / "Program Files" / "DAUM" / "PotPlayer" / "PotPlayer64.exe"
F_EVERYTHING = D_C_DRIVE / "Program Files" / "Everything" / "Everything.exe"
# F_SNIPPING_TOOL = D_C_DRIVE / "Program Files" / "WindowsApps" / "Microsoft.ScreenSketch_11.2507.14.0_x64__8wekyb3d8bbwe" / "SnippingTool" / "SnippingTool.exe"


F_LOSSLESSCUT_EXE = D_TASK_ORCHESTRATOR_CLI_RESOURCES_WINDOWS / "LosslessCut-win-x64_3.64.0" / "LosslessCut.exe"
F_FFMPEG_EXE = D_TASK_ORCHESTRATOR_CLI_RESOURCES_WINDOWS / "LosslessCut-win-x64" / "resources" / "ffmpeg.exe"

F_TASK_ORCHESTRATOR_CLI_LAUNCHER_LNK = D_DESKTOP / "task_orchestrator_cli_launcher.lnk"

# F_VSCODE = D_USERPROFILE / "AppData" / "Local" / "Programs" / "Microsoft VS Code" / "Code.exe"
F_VSCODE_LNK = D_USERPROFILE / "AppData" / "Roaming" / "Microsoft" / "Windows" / "Start Menu" / "Programs" / "Visual Studio Code" / "Visual Studio Code.lnk"
F_BIT_TORRENT_EXE = D_USERPROFILE / "AppData" / "Roaming" / "bit_torrent.exe"
# F_CURSOR = D_USERPROFILE / "AppData" / "Local" / "Programs" / "cursor" / "Cursor.exe"
F_CURSOR_LNK = D_USERPROFILE / "AppData" / "Roaming" / "Microsoft" / "Windows" / "Start Menu" / "Programs" / "Cursor" / "Cursor.lnk"
F_CLAUDE_LNK = D_USERPROFILE / "AppData" / "Local" / "AnthropicClaude" / "claude.exe"

F_UV_ZIP = D_DOWNLOADS / "uv.zip"
F_FZF_ZIP = D_DOWNLOADS / "fzf.zip"

F_MERGED_EXCEL_FILE = D_TASK_ORCHESTRATOR_CLI_CACHE / 'merged.xlsx'

F_VIDEO_POTPLAYER64_DPL = D_TASK_ORCHESTRATOR_CLI_VIDEO / "PotPlayer64.dpl"

F_CHORME_YOUTUBE_COOKIE = D_TASK_ORCHESTRATOR_CLI_SENSITIVE / "chrome_youtube.cookies"
F_DOWNLOAD_YOUTUBE_VIDEOS_HISTORY = D_TASK_ORCHESTRATOR_CLI_SENSITIVE / "ensure_youtube_videos_downloaded_v3.history"
F_SCHEDULER_STATE = D_TASK_ORCHESTRATOR_CLI_SENSITIVE / "scheduler_state.json"
F_VIDEO_LIST_ALLOWED_TO_LOAD_TXT = D_TASK_ORCHESTRATOR_CLI_SENSITIVE / 'f_videos_allowed_to_load.txt'
F_MEMO_TRASH_BIN_TOML = D_TASK_ORCHESTRATOR_CLI_SENSITIVE / 'memo_trash_bin.toml'
F_USELESS_FILE_NAMES_TXT = D_TASK_ORCHESTRATOR_CLI_SENSITIVE / "useless_file_names.txt"
F_TASK_ORCHESTRATOR_CLI_SQLITE = D_TASK_ORCHESTRATOR_CLI_SENSITIVE / 'task_orchestrator_cli.sqlite'
F_DB_JSON = D_TASK_ORCHESTRATOR_CLI_SENSITIVE / "db.json"
F_BOOKS_JSON = D_TASK_ORCHESTRATOR_CLI_SENSITIVE / "books.json"
F_USERS_JSON = D_TASK_ORCHESTRATOR_CLI_SENSITIVE / "users.json"
F_NAV_ITEMS_JSON = D_TASK_ORCHESTRATOR_CLI_SENSITIVE / "nav_items.json"
F_HISTORICAL_PNX = D_TASK_ORCHESTRATOR_CLI_SENSITIVE / 'historical_pnx.txt'
F_HISTORICAL_SEARCH_KEYWORD = D_TASK_ORCHESTRATOR_CLI_SENSITIVE / 'historical_search_keyword.txt'
F_YOUTUBE_COOKIES_TXT = D_TASK_ORCHESTRATOR_CLI_SENSITIVE / "youtube_cookies.txt"
F_PK_ALIAS_MACROS_TXT = D_TASK_ORCHESTRATOR_CLI_SENSITIVE / "pk_alias_macros.txt"
F_DB_YAML = D_TASK_ORCHESTRATOR_CLI_SENSITIVE / "db.yaml"

F_SILENT_MP3 = D_TASK_ORCHESTRATOR_CLI_SOUND / "silent.mp3"
F_SILENT_WAV = D_TASK_ORCHESTRATOR_CLI_SOUND / "silent.wav"
F_POP_SOUND_POP_SOUND_WAV = D_TASK_ORCHESTRATOR_CLI_SOUND / "pop_sound.wav"
F_SOUND_POTPLAYER64_DPL = D_TASK_ORCHESTRATOR_CLI_SOUND / "PotPlayer64.dpl"

F_PK_ENSURE_GEMINI_CLI_WHIP_KIT_ENABLED_INTERACTIVE = f'{D_TASK_ORCHESTRATOR_CLI_WRAPPERS}\pk_ensure_routine_gemini_cli_assistance_enabled_enabled.py'
F_PK_ENSURE_GEMINI_CLI_LOCATED_TO_FRONT = f'{D_TASK_ORCHESTRATOR_CLI_WRAPPERS}\pk_ensure_gemini_cli_located_to_front.py'
F_ENSURE_ARG_RECIEVED = f'{D_TASK_ORCHESTRATOR_CLI_WRAPPERS}\pk_ensure_arg_recieved.py'

# F_LOSSLESSCUT_EXE = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "LosslessCut-win-x64_3.65.0"/"LosslessCut.exe" # 3.60.0 pre release video 간헐적 끊김 issue discovered
F_LOSSLESSCUT = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "LosslessCut-linux-x64" / "LosslessCut"
F_ICON_PNG = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "task_orchestrator_cli_icon" / "icon.PNG"
F_MONTSERRAT_THIN_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat-Thin.ttf"
F_NOTOSANSKR_VARIABLEFONT_WGHT_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Noto_Sans_KR" / "NotoSansKR-VariableFont_wght.ttf"
F_NOTOSANSKR_BLACK_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "NotoSansKR-Black.ttf"
F_NOTOSANSKR_BOLD_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "NotoSansKR-Bold.ttf"
F_NOTOSANSKR_EXTRABOLD_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "NotoSansKR-ExtraBold.ttf"
F_NOTOSANSKR_EXTRALIGHT_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "NotoSansKR-ExtraLight.ttf"
F_NOTOSANSKR_LIGHT_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "NotoSansKR-Light.ttf"
F_NOTOSANSKR_MEDIUM_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "NotoSansKR-Medium.ttf"
F_NOTOSANSKR_REGULAR_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "NotoSansKR-Regular.ttf"
F_NOTOSANSKR_SEMIBOLD_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "NotoSansKR-SemiBold.ttf"
F_NOTOSANSKR_THIN_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "NotoSansKR-Thin.ttf"
F_GMARKETSANSTTFBOLD_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "GmarketSansTTFBold.ttf"
F_GMARKETSANSTTFLIGHT_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "GmarketSansTTFLight.ttf"
F_GMARKETSANSTTFMEDIUM_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "GmarketSansTTFMedium.ttf"
F_ITALIC_VARIABLEFONT_WGHT_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat" / "Montserrat-Italic-VariableFont_wght.ttf"
F_MONTSERRAT_VARIABLEFONT_WGHT_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat" / "Montserrat-VariableFont_wght.ttf"
F_MONTSERRAT_BLACK_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat-Black.ttf"
F_MONTSERRAT_BLACKITALIC_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat-BlackItalic.ttf"
F_MONTSERRAT_BOLD_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat-Bold.ttf"
F_MONTSERRAT_BOLDITALIC_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat-BoldItalic.ttf"
F_MONTSERRAT_EXTRABOLD_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat-ExtraBold.ttf"
F_MONTSERRAT_EXTRABOLDITALIC_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat-ExtraBoldItalic.ttf"
F_MONTSERRAT_EXTRALIGHT_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat-ExtraLight.ttf"
F_MONTSERRAT_EXTRALIGHTITALIC_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat-ExtraLightItalic.ttf"
F_MONTSERRAT_ITALIC_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat-Italic.ttf"
F_MONTSERRAT_LIGHT_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat-Light.ttf"
F_MONTSERRAT_LIGHTITALIC_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat-LightItalic.ttf"
F_MONTSERRAT_MEDIUM_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat-Medium.ttf"
F_MONTSERRAT_MEDIUMITALIC_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat-MediumItalic.ttf"
F_MONTSERRAT_REGULAR_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat-Regular.ttf"
F_MONTSERRAT_SEMIBOLD_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat-SemiBold.ttf"
F_MONTSERRAT_SEMIBOLDITALIC_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat-SemiBoldItalic.ttf"
F_MONTSERRAT_THINITALIC_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Montserrat-ThinItalic.ttf"
F_POPPINS_BLACK_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Poppins-Black.ttf"
F_POPPINS_BLACKITALIC_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Poppins-BlackItalic.ttf"
F_POPPINS_BOLD_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Poppins-Bold.ttf"
F_POPPINS_BOLDITALIC_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Poppins-BoldItalic.ttf"
F_POPPINS_EXTRABOLD_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Poppins-ExtraBold.ttf"
F_POPPINS_EXTRABOLDITALIC_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Poppins-ExtraBoldItalic.ttf"
F_POPPINS_EXTRALIGHT_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Poppins-ExtraLight.ttf"
F_POPPINS_EXTRALIGHTITALIC_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Poppins-ExtraLightItalic.ttf"
F_POPPINS_ITALIC_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Poppins-Italic.ttf"
F_POPPINS_LIGHT_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Poppins-Light.ttf"
F_POPPINS_LIGHTITALIC_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Poppins-LightItalic.ttf"
F_POPPINS_MEDIUM_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Poppins-Medium.ttf"
F_POPPINS_MEDIUMITALIC_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Poppins-MediumItalic.ttf"
F_POPPINS_REGULAR_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Poppins-Regular.ttf"
F_POPPINS_SEMIBOLD_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Poppins-SemiBold.ttf"
F_POPPINS_SEMIBOLDITALIC_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Poppins-SemiBoldItalic.ttf"
F_POPPINS_THIN_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Poppins-Thin.ttf"
F_POPPINS_THINITALIC_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "Poppins-ThinItalic.ttf"
F_RUBIKDOODLESHADOW_REGULAR_TTF = D_TASK_ORCHESTRATOR_CLI_RESOURCES / "RubikDoodleShadow-Regular.ttf"  # 너무 귀여운 입체감 있는 영어 폰트 # Special cute font

F_TEST_PK_PYTHON_PROGRAM_STRUCTURE_PY = D_TASK_ORCHESTRATOR_CLI_FUNCTIONS / "test_task_orchestrator_cli_process_structure.py"

F_SNIPPING_TOOL_EXE = "snippingtool.exe"
F_VSCODE = "code"
F_FFMPEG = "ffmpeg"
F_YT_DLP = "yt-dlp"
F_JQ = "jq"
F_GNOME_SCREENSHOT = "gnome-screenshot"  # Linux 스크린샷 도구
F_TRANSMISSION_GTK = "transmission-gtk"  # Linux 토렌트 클라이언트
F_CURSOR = "cursor"  # Linux Cursor 실행 파일
F_CLAUDE = rf"claude"
F_UV = "uv"  # 시스템에 설치된 uv 사용
F_PYCHARM = "pycharm-community"  # 시스템 PATH에 있는 경우
